<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일이 여러개일 수 있으므로
	이를 구별하기 위한 식별 용도로 사용
 -->
<mapper namespace="lprod">
	<!-- LPROD : ATTACH = 1 : N -->
	<resultMap type="lprodVO" id="lprodMap">
		<result property="lprodGu" column="LPROD_GU" /> 
		<result property="lprodId" column="LPROD_ID" /> 
		<result property="lprodNm" column="LPROD_NM" />
		<collection property="attachVOList" resultMap="attachMap"></collection> 
	</resultMap>
	
	<resultMap type="attachVO" id="attachMap">
		<result property="etpId" column="ETP_ID" /> 
		<result property="seq" column="SEQ" />  
		<result property="filename" column="FILENAME" /> 
		<result property="filesize" column="FILESIZE" />  
		<result property="thumbnail" column="THUMBNAIL" /> 
		<result property="regdate" column="REGDATE" />  
	</resultMap>
	
	<!-- 검색 -->
	<sql id="where">
		<if test="keyword!=null and keyword!=''">
		AND    (LPROD_ID LIKE '%' || #{keyword} || '%' 
		     OR LPROD_GU LIKE '%' || #{keyword} || '%' 
		     OR LPROD_NM LIKE '%' || #{keyword} || '%' 
			)
		</if>
	</sql>
	
	<!-- map{"size":"10","currentPage":"1","keyword":""} -->
	<select id="list" parameterType="hashMap" resultType="lprodVO">
		WITH U AS(
		    SELECT ROW_NUMBER() OVER (ORDER BY T.LPROD_ID DESC) RNUM
		         , T.*
		    FROM
		    (
		        SELECT LPROD_ID, LPROD_GU, LPROD_NM
		        FROM   LPROD
		        WHERE  1 = 1
		        <include refid="where"></include>
		    ) T
		)
		SELECT U.*
		FROM   U
		WHERE  U.RNUM BETWEEN (#{currentPage}*#{size})-(#{size}-1) 
					AND (#{currentPage}*#{size})
	</select>
	
	<!-- 상품분류 자동생성 -->
	<select id="getLprodId" resultType="int">
		SELECT NVL(MAX(TO_NUMBER(LPROD_ID)),0)+1 FROM LPROD
	</select>
	
	<!-- 상품분류코드 자동생성 -->
	<select id="getLprodGu" resultType="String">
		SELECT SUBSTR(MAX(LPROD_GU),1,1) || (SUBSTR(MAX(LPROD_GU),2) + 1)
	 	FROM   LPROD
	</select>
	
	<!-- 상품분류 정보를 입력 
	lprodVO : LprodVO[lprodId:10,lprodGu:P404,lprodNm:간식류]
	insert/update/delete의 resultType은 생략(int)
	
	rok : 락커
	-->
	<insert id="createPost" parameterType="lprodVO">
		<selectKey order="BEFORE" keyProperty="lprodId" resultType="int">
			SELECT NVL(MAX(LPROD_ID),0)+1 FROM LPROD
		</selectKey>
		INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM)
		VALUES(#{lprodId},
		(SELECT SUBSTR(MAX(LPROD_GU),1,1) || (SUBSTR(MAX(LPROD_GU),2) + 1)
	 	FROM   LPROD)
	 	,#{lprodNm})
	</insert>
	
	<!-- 상품분류 상세보기 
	lprodVO(전) : LprodVO [lprodId=0, lprodGu=P404, lprodNm=null]
	
	lprodVO(후) : LprodVO [lprodId=10, lprodGu=P404, lprodNm=간식류]
	-->
	<select id="detail" parameterType="lprodVO" resultMap="lprodMap">
		SELECT A.LPROD_ID, A.LPROD_GU, A.LPROD_NM
		     , B.SEQ, B.FILENAME, B.FILESIZE, B.THUMBNAIL, B.REGDATE, B.ETP_ID
		FROM   LPROD A LEFT OUTER JOIN ATTACH B ON(A.LPROD_GU = B.ETP_ID)
		WHERE  A.LPROD_GU = #{lprodGu}
	</select>
	
	<!-- 상품분류 정보변경 
	lprodVO {"lprodId":"10","lprodGu":"P404","lprodNm":"간식류변경"}
	-->
	<update id="updatePost" parameterType="lprodVO">
		UPDATE LPROD
		SET    LPROD_NM = #{lprodNm}
		WHERE  LPROD_GU = #{lprodGu}
	</update>
	
	<!-- 상품정보 삭제 
	lprodVO{"lprodId":"10","lprodGu":"P404","lprodNm":"간식류변경"}
	-->
	<delete id="deletePost" parameterType="lprodVO">
		DELETE FROM LPROD
		WHERE  LPROD_GU = #{lprodGu}
	</delete>
	
	<!-- 첨부파일 등록
	
	 -->
	<insert id="uploadFormAction" parameterType="attachVO">
		<!-- rok : 락커 -->
		<selectKey resultType="int" order="BEFORE" keyProperty="seq">
			SELECT NVL(MAX(SEQ),0)+1 FROM ATTACH
		</selectKey>
		INSERT INTO ATTACH(SEQ, FILENAME, FILESIZE, THUMBNAIL, REGDATE)
		VALUES(
		    #{seq},
		    #{filename},#{filesize},
		    #{thumbnail},
		    SYSDATE
		)
	</insert>
	
	<!-- 다중 insert 시 update 태그를 사용하지
		드루와 : List<AttachVO> attachVOList 
		가즈아 : insert, update, delete의 경우 resultType은 생략
	 -->
	 <update id="createPostAttach" parameterType="java.util.List">
	 	<!-- 
	 	order="BEFORE"는 foreach 태그 실행 전에 selectKey부터 실행
	 	 -->
	 	<selectKey resultType="int" order="BEFORE" keyProperty="seq">
	 		SELECT NVL(MAX(SEQ),0)+1 FROM ATTACH
	 	</selectKey>
	 	<!-- index : 반복 시 index값. 0부터 시작. -->
	 	<foreach collection="list" item="attachVO" 
	 		open="INSERT ALL" close="SELECT * FROM DUAL" separator=" "
	 		index="idx">
	 		INTO ATTACH(SEQ, FILENAME, FILESIZE, THUMBNAIL, REGDATE, ETP_ID) 
		    VALUES(#{idx}+#{seq},#{attachVO.filename},#{attachVO.filesize},'',sysdate
		    ,#{attachVO.etpId})
	 	</foreach>
	 </update>
	 
	 <!-- 전체 행의 수(total).  -->
	 <select id="getTotal" resultType="int">
	 	SELECT COUNT(*) FROM LPROD
	 	WHERE  1 = 1
	 	<include refid="where"></include>
	 </select>
	 
	 <!-- 상품별 판매금액의 합계가 천만원이 넘은 데이터 -->
	 <select id="cartMoney" resultType="hashMap">
	 	SELECT P.PROD_NAME prodName
		     , SUM(P.PROD_SALE * C.CART_QTY) money
		FROM   PROD P, CART C
		WHERE  P.PROD_ID = C.CART_PROD
		GROUP BY P.PROD_NAME
		HAVING SUM(P.PROD_SALE * C.CART_QTY) >= 10000000
	 </select>
	 
	 <!-- 회원별 구매회수 구하기 -->
	 <select id="memberMoney" resultType="hashMap">
	 	SELECT MEM_ID || '(' || MEM_NAME || ')' MEMID
		     , COUNT(CART_NO) CARTCNT
		FROM   MEMBER M, CART C
		WHERE  M.MEM_ID = C.CART_MEMBER
		GROUP BY MEM_ID || '(' || MEM_NAME || ')'
		HAVING COUNT(CART_NO) >= 10
		ORDER BY 1
	 </select>
</mapper>















